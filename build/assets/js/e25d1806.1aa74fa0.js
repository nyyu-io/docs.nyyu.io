"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[5260],{3582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(4848),r=n(8453);const o={},s=void 0,i={id:"api/profile/Update Avatar Set",title:"Update Avatar Set",description:"updateAvatarSet(",source:"@site/docs/api/profile/Update Avatar Set.md",sourceDirName:"api/profile",slug:"/api/profile/Update Avatar Set",permalink:"/docs/api/profile/Update Avatar Set",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/profile/Update Avatar Set.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Set Avatar",permalink:"/docs/api/profile/Set Avatar"},next:{title:"Add New Task Setting",permalink:"/docs/api/user-tier/Add New Task Setting"}},d={},c=[{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example Mutation",id:"example-mutation",level:3},{value:"Note",id:"note",level:3}];function p(e){const t={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-markdown",children:"## Update Avatar Set (User Role)\n\nThe `updateAvatarSet` mutation allows a user to update their avatar components. This mutation is called when the user clicks the \u2018Save\u2019 button in the dress-up modal.\n\n### Mutation: `updateAvatarSet`\n\n#### Schema:\n```graphql\nupdateAvatarSet(\n  components: [AvatarSetInput]!\n): [AvatarSet]\n"})}),"\n",(0,a.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"components"})," ([AvatarSetInput]): A list of avatar components to set. This field is mandatory."]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"return",children:"Return"}),"\n",(0,a.jsxs)(t.p,{children:["The mutation returns a list of ",(0,a.jsx)(t.code,{children:"AvatarSet"})," objects representing the updated avatar components."]}),"\n",(0,a.jsx)(t.h3,{id:"example-mutation",children:"Example Mutation"}),"\n",(0,a.jsxs)(t.p,{children:["The following is an example of how to use the ",(0,a.jsx)(t.code,{children:"updateAvatarSet"})," mutation to update avatar components:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:'mutation {\n  updateAvatarSet(\n    components: [\n      {\n        groupId: "hair",\n        compId: "UUID1"\n      },\n      {\n        groupId: "other",\n        compId: "UUID2"\n      }\n    ]\n  ) {\n    groupId,\n    compId\n  }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"note",children:"Note"}),"\n",(0,a.jsxs)(t.p,{children:["In this example, the mutation updates the avatar components with the specified group IDs and component IDs. The return value is a list of the updated ",(0,a.jsx)(t.code,{children:"AvatarSet"})," objects, each containing the ",(0,a.jsx)(t.code,{children:"groupId"})," and ",(0,a.jsx)(t.code,{children:"compId"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);