"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[2224],{4211:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>r});var i=t(4848),o=t(8453);const a={},d=void 0,s={id:"api/Auction/Update Existing Auction Round",title:"Update Existing Auction Round",description:"The functions described is accessible only to users with ADMIN privileges.",source:"@site/docs/api/Auction/Update Existing Auction Round.md",sourceDirName:"api/Auction",slug:"/api/Auction/Update Existing Auction Round",permalink:"/docs/api/Auction/Update Existing Auction Round",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/Auction/Update Existing Auction Round.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Get Current Round",permalink:"/docs/api/Auction/Get Current Round"},next:{title:"Avatar Summary",permalink:"/docs/api/Avatar/Avatar Summary"}},c={},r=[{value:"Mutation: <code>updateAuction</code>",id:"mutation-updateauction",level:3},{value:"Schema:",id:"schema",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example Mutation",id:"example-mutation",level:3},{value:"Note",id:"note",level:3}];function u(n){const e={admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsx)(e.p,{children:"The functions described is accessible only to users with ADMIN privileges."})}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"updateAuction"})," mutation allows an admin to update an existing auction round's details."]}),"\n",(0,i.jsxs)(e.h3,{id:"mutation-updateauction",children:["Mutation: ",(0,i.jsx)(e.code,{children:"updateAuction"})]}),"\n",(0,i.jsx)(e.h4,{id:"schema",children:"Schema:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"updateAuction(\n  id: String!,\n  round: Int, \n  duration: Float,  \n  totalToken: Float, \n  minPrice: Float,\n  avatar: [AvatarSetInput],\n  token: Float\n): Auction!\n"})}),"\n",(0,i.jsx)(e.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"id"})," (String): Unique ID of the round to update. This field is mandatory."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"round"})," (Int): Auction round number. This field is optional."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"duration"})," (Float): Duration of the round in milliseconds. This field is optional."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"totalToken"})," (Float): Amount of tokens assigned to this round. This field is optional."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"minPrice"})," (Float): Minimum price of NDB tokens in this round. This field is optional."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"avatar"})," ([AvatarSetInput]): List of avatar components included in the auction. This field is optional."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"token"})," (Float): Extra tokens to be allocated for avatar matching user. This field is optional."]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"return",children:"Return"}),"\n",(0,i.jsxs)(e.p,{children:["The mutation returns the updated ",(0,i.jsx)(e.code,{children:"Auction"})," object if successful."]}),"\n",(0,i.jsx)(e.h3,{id:"example-mutation",children:"Example Mutation"}),"\n",(0,i.jsxs)(e.p,{children:["The following is an example of how to use the ",(0,i.jsx)(e.code,{children:"updateAuction"})," mutation to update an existing auction round:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'mutation {\n  updateAuction(\n    id: "abcd1234",\n    round: 2,\n    duration: 7200000.0,  // 2 hours in milliseconds\n    totalToken: 1500.0,\n    minPrice: 0.15,\n    avatar: [\n      { groupId: "heroes", compId: 202 },\n      { groupId: "villains", compId: 302 }\n    ],\n    token: 600.0\n  ) {\n    id,\n    round,\n    startedAt,\n    duration,\n    totalToken,\n    minPrice,\n    avatar {\n      groupId,\n      compId\n    },\n    token,\n    status\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"note",children:"Note"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["If the status of the round is not ",(0,i.jsx)(e.code,{children:"PENDING"}),", the update cannot be performed."]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["In this example, the mutation updates the auction round with the ID ",(0,i.jsx)(e.code,{children:"abcd1234"}),", modifying attributes such as ",(0,i.jsx)(e.code,{children:"round"}),", ",(0,i.jsx)(e.code,{children:"duration"}),", ",(0,i.jsx)(e.code,{children:"totalToken"}),", ",(0,i.jsx)(e.code,{children:"minPrice"}),", ",(0,i.jsx)(e.code,{children:"avatar"}),", and ",(0,i.jsx)(e.code,{children:"token"}),". The return value includes the updated ",(0,i.jsx)(e.code,{children:"Auction"})," object with all specified attributes, including its status."]})]})}function l(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function d(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:d(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);