"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[9344],{2520:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var n=t(4848),o=t(8453);const a={},s=void 0,c={id:"api/notification/Add New Notification Type",title:"Add New Notification Type",description:"The functions described is accessible only to users with ADMIN privileges.",source:"@site/docs/api/notification/Add New Notification Type.md",sourceDirName:"api/notification",slug:"/api/notification/Add New Notification Type",permalink:"/docs/api/notification/Add New Notification Type",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/notification/Add New Notification Type.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"User Tier Suammary",permalink:"/docs/api/user-tier/User Tier Suammary"},next:{title:"Get All Notification Types",permalink:"/docs/api/notification/Get All Notification Types"}},d={},r=[{value:"Mutation: <code>addNewNotificationType2</code>",id:"mutation-addnewnotificationtype2",level:3},{value:"Schema:",id:"schema",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example Mutation",id:"example-mutation",level:3},{value:"Return",id:"return-1",level:3}];function l(e){const i={admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsx)(i.p,{children:"The functions described is accessible only to users with ADMIN privileges."})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"addNewNotificationType2"})," mutation allows an admin to add a new notification type to the system."]}),"\n",(0,n.jsxs)(i.h3,{id:"mutation-addnewnotificationtype2",children:["Mutation: ",(0,n.jsx)(i.code,{children:"addNewNotificationType2"})]}),"\n",(0,n.jsx)(i.h4,{id:"schema",children:"Schema:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:"addNewNotificationType2(\n  nType: Int!,\n  tName: String!,\n  broadcast: Boolean!\n): NotificationType2\n"})}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"nType"})," (Int): Unique value to identify the notification type. This field is mandatory."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"tName"})," (String): The name of the notification type (e.g., BID RANKING UPDATED). This field is mandatory."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"broadcast"})," (Boolean): Indicates if the notification is broadcast or unicast. Currently not supported. This field is mandatory."]}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"return",children:"Return"}),"\n",(0,n.jsxs)(i.p,{children:["The mutation returns a ",(0,n.jsx)(i.code,{children:"NotificationType2"})," object representing the created notification type if successful. If the notification type is successfully created, it returns the message: ",(0,n.jsx)(i.code,{children:'"Notification Type created successfully!"'}),"."]}),"\n",(0,n.jsx)(i.h3,{id:"example-mutation",children:"Example Mutation"}),"\n",(0,n.jsxs)(i.p,{children:["The following is an example of how to use the ",(0,n.jsx)(i.code,{children:"addNewNotificationType2"})," mutation to add a new notification type:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:'mutation {\n  addNewNotificationType2(\n    nType: 4,\n    tName: "VERIFICATION RESULT",\n    broadcast: false\n  ) {\n    nType,\n    tName,\n    broadcast\n  }\n}\n'})}),"\n",(0,n.jsx)(i.h3,{id:"return-1",children:"Return"}),"\n",(0,n.jsxs)(i.p,{children:["The example returns the ",(0,n.jsx)(i.code,{children:"NotificationType2"})," object with details such as ",(0,n.jsx)(i.code,{children:"nType"}),", ",(0,n.jsx)(i.code,{children:"tName"}),", and ",(0,n.jsx)(i.code,{children:"broadcast"}),". If the operation is successful, it also returns the message ",(0,n.jsx)(i.code,{children:'"Notification Type created successfully!"'}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["In this example, the mutation adds a new notification type with ",(0,n.jsx)(i.code,{children:"nType"})," set to ",(0,n.jsx)(i.code,{children:"4"}),", ",(0,n.jsx)(i.code,{children:"tName"})," set to ",(0,n.jsx)(i.code,{children:'"VERIFICATION RESULT"'}),", and ",(0,n.jsx)(i.code,{children:"broadcast"})," set to ",(0,n.jsx)(i.code,{children:"false"}),". The return value includes the details of the created ",(0,n.jsx)(i.code,{children:"NotificationType2"})," and a success message."]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>c});var n=t(6540);const o={},a=n.createContext(o);function s(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);