"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[7070],{1901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var i=t(4848),s=t(8453);const a={},r=void 0,l={id:"api/Avatar/Avatar Summary",title:"Avatar Summary",description:"The Avatar system includes various components and profiles to represent users' avatars. These include components (such as accessories), profiles (combinations of components), and avatar sets (groups of components).",source:"@site/docs/api/Avatar/Avatar Summary.md",sourceDirName:"api/Avatar",slug:"/api/Avatar/Avatar Summary",permalink:"/docs/api/Avatar/Avatar Summary",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/Avatar/Avatar Summary.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Update Existing Auction Round",permalink:"/docs/api/Auction/Update Existing Auction Round"},next:{title:"Create Avatar Component",permalink:"/docs/api/Avatar/Create Avatar Component"}},d={},o=[{value:"Concepts",id:"concepts",level:3},{value:"Authority",id:"authority",level:3},{value:"Types",id:"types",level:3},{value:"AvatarComponent",id:"avatarcomponent",level:4},{value:"Fields",id:"fields",level:5},{value:"AvatarProfile",id:"avatarprofile",level:4},{value:"Fields",id:"fields-1",level:5},{value:"SkillSet",id:"skillset",level:4},{value:"Fields",id:"fields-2",level:5},{value:"AvatarSet",id:"avatarset",level:4},{value:"Fields",id:"fields-3",level:5},{value:"AvatarSetInput",id:"avatarsetinput",level:4},{value:"Fields",id:"fields-4",level:5},{value:"AvatarFacts",id:"avatarfacts",level:4},{value:"Fields",id:"fields-5",level:5},{value:"FactsInput",id:"factsinput",level:4},{value:"Fields",id:"fields-6",level:5}];function c(e){const n={code:"code",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Avatar system includes various components and profiles to represent users' avatars. These include components (such as accessories), profiles (combinations of components), and avatar sets (groups of components)."}),"\n",(0,i.jsx)(n.h3,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component"}),": An accessory for avatars, such as hats or facial features. Each component has a ",(0,i.jsx)(n.code,{children:"groupId"})," (kind) and a ",(0,i.jsx)(n.code,{children:"compId"})," (unique ID)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GroupId"}),": The category of components (e.g., hats, hairColor)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CompId"}),": A unique ID for each component (auto-generated as an integer)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profile"}),": A combination of multiple components."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AvatarSet"}),": A model representing a set of components with ",(0,i.jsx)(n.code,{children:"groupId"})," and ",(0,i.jsx)(n.code,{children:"compId"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"authority",children:"Authority"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Admin Role"}),": Required for creating and updating components and profiles."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Role"}),": Sufficient for retrieving avatars."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.h4,{id:"avatarcomponent",children:"AvatarComponent"}),"\n",(0,i.jsx)(n.p,{children:"Represents an individual component of an avatar."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type AvatarComponent {\n  groupId: String!,\n  compId: Int!,\n  tierLevel: Int,\n  price: Float,\n  limited: Int,\n  purchased: Int,\n  svg: String,\n  width: Int,\n  top: Int,\n  left: Int\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupId"}),' (String!): The category of the component (e.g., "hats").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compId"})," (Int!): The unique ID of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tierLevel"})," (Int): The tier level required to use the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"price"})," (Float): The price of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"limited"})," (Int): The maximum number of components that can be sold."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchased"})," (Int): The number of components purchased."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"svg"})," (String): The SVG content of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"width"})," (Int): The width of the component as a percentage."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"top"})," (Int): The top margin of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"left"})," (Int): The left margin of the component."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"avatarprofile",children:"AvatarProfile"}),"\n",(0,i.jsx)(n.p,{children:"Represents a combination of avatar components, forming a profile."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type AvatarProfile {\n  id: Int!,\n  regDate: Float,\n  updateDate: Float,\n  deleted: Int,\n  fname: String!,\n  surname: String,\n  skillSet: [SkillSet],\n  avatarSet: [AvatarSet],\n  hairColor: String,\n  factsSet: [AvatarFacts],\n  details: String\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-1",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (Int!): The unique identifier for the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regDate"})," (Float): The registration date of the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateDate"})," (Float): The last update date of the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deleted"})," (Int): Indicates if the profile is deleted (0 for not deleted, 1 for deleted)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fname"})," (String!): The first name associated with the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"surname"})," (String): The surname associated with the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skillSet"})," ([SkillSet]): A list of skills associated with the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"avatarSet"})," ([AvatarSet]): A list of avatar sets associated with the profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hairColor"})," (String): The hair color of the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"factsSet"})," ([AvatarFacts]): A list of facts associated with the avatar profile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"details"})," (String): Additional details about the avatar profile."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"skillset",children:"SkillSet"}),"\n",(0,i.jsx)(n.p,{children:"Represents a skill associated with an avatar profile."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type SkillSet {\n  id: Int,\n  name: String!,\n  rate: Int\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-2",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (Int): The unique identifier for the skill."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," (String!): The name of the skill."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rate"})," (Int): The rating of the skill (number of stars)."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"avatarset",children:"AvatarSet"}),"\n",(0,i.jsx)(n.p,{children:"Represents a set of avatar components."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type AvatarSet {\n  id: Int!,\n  regDate: Float,\n  updateDate: Float,\n  deleted: Int,\n  groupId: String,\n  compId: Int\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-3",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (Int!): The unique identifier for the avatar set."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regDate"})," (Float): The registration date of the avatar set."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateDate"})," (Float): The last update date of the avatar set."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deleted"})," (Int): Indicates if the set is deleted (0 for not deleted, 1 for deleted)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupId"})," (String): The category of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compId"})," (Int): The unique ID of the component."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"avatarsetinput",children:"AvatarSetInput"}),"\n",(0,i.jsx)(n.p,{children:"Input type for setting avatar components."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"input AvatarSetInput {\n  groupId: String,\n  compId: Int\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-4",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupId"})," (String): The category of the component."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compId"})," (Int): The unique ID of the component."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"avatarfacts",children:"AvatarFacts"}),"\n",(0,i.jsx)(n.p,{children:"Represents a fact associated with an avatar profile."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type AvatarFacts {\n  id: Int!,\n  regDate: Float,\n  updateDate: Float,\n  deleted: Int,\n  topic: String,\n  detail: String\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-5",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (Int!): The unique identifier for the fact."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regDate"})," (Float): The registration date of the fact."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateDate"})," (Float): The last update date of the fact."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deleted"})," (Int): Indicates if the fact is deleted (0 for not deleted, 1 for deleted)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"topic"})," (String): The topic of the fact."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"detail"})," (String): The detail content of the fact."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"factsinput",children:"FactsInput"}),"\n",(0,i.jsx)(n.p,{children:"Input type for setting avatar facts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"input FactsInput {\n  topic: String,\n  detail: String\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"fields-6",children:"Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"topic"})," (String): The topic of the fact."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"detail"})," (String): The detail content of the fact."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);