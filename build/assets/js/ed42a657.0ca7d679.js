"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[1731],{8319:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=i(4848),s=i(8453);const o={},r=void 0,d={id:"api/bid/Increase an Existing Bid",title:"Increase an Existing Bid",description:"The increaseBid mutation allows a user to increase the token price or token amount of an existing bid in a specified auction round.",source:"@site/docs/api/bid/Increase an Existing Bid.md",sourceDirName:"api/bid",slug:"/api/bid/Increase an Existing Bid",permalink:"/docs/api/bid/Increase an Existing Bid",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/bid/Increase an Existing Bid.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Get Bid",permalink:"/docs/api/bid/Get Bid"},next:{title:"Place a New Bid",permalink:"/docs/api/bid/Place a New Bid"}},a={},c=[{value:"Mutation: <code>increaseBid</code>",id:"mutation-increasebid",level:3},{value:"Schema:",id:"schema",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example Mutation",id:"example-mutation",level:3},{value:"Notes",id:"notes",level:3}];function l(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"increaseBid"})," mutation allows a user to increase the token price or token amount of an existing bid in a specified auction round."]}),"\n",(0,t.jsxs)(n.h3,{id:"mutation-increasebid",children:["Mutation: ",(0,t.jsx)(n.code,{children:"increaseBid"})]}),"\n",(0,t.jsx)(n.h4,{id:"schema",children:"Schema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"increaseBid(\n  roundId: String!,\n  tokenAmount: Float!,\n  tokenPrice: Float!,\n  payment: Int!,\n  cryptoType: String\n): Bid\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"roundId"})," (String): The ID of the round to increase the bid. This field is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tokenAmount"})," (Float): The new amount of tokens to bid. This field is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tokenPrice"})," (Float): The new price per token. This field is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"payment"})," (Int): The payment method (1: CREDIT, 2: CRYPTO, 3: WALLET). This field is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cryptoType"}),' (String): The type of cryptocurrency for payment, e.g., "BTC", "BCH". This field is optional but required if the payment method is CRYPTO.']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"return",children:"Return"}),"\n",(0,t.jsxs)(n.p,{children:["The mutation returns the updated ",(0,t.jsx)(n.code,{children:"Bid"})," object if successful."]}),"\n",(0,t.jsx)(n.h3,{id:"example-mutation",children:"Example Mutation"}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example of how to use the ",(0,t.jsx)(n.code,{children:"increaseBid"})," mutation to increase an existing bid:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  increaseBid(\n    roundId: "abcd1234",\n    tokenAmount: 150.0,\n    tokenPrice: 0.6,\n    payment: 2,\n    cryptoType: "BTC"\n  ) {\n    userId,\n    roundId,\n    tokenAmount,\n    totalPrice,\n    tokenPrice,\n    tempTokenAmount,\n    tempTokenPrice,\n    delta,\n    pendingIncrease,\n    holdings {\n      key,\n      value {\n        crypto,\n        usd\n      }\n    },\n    payType,\n    cryptoType,\n    placedAt,\n    updatedAt,\n    status\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The new price must be larger than or equal to the original price."}),"\n",(0,t.jsxs)(n.li,{children:["Other conditions are the same as placing a bid:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Bids can be placed only for rounds with status ",(0,t.jsx)(n.code,{children:"STARTED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If the payment method is not ",(0,t.jsx)(n.code,{children:"CREDIT"}),", ",(0,t.jsx)(n.code,{children:"cryptoType"})," must be provided."]}),"\n",(0,t.jsxs)(n.li,{children:["If the payment method is ",(0,t.jsx)(n.code,{children:"CRYPTO"}),", bids must be placed at least 10 minutes before the end of the round."]}),"\n",(0,t.jsx)(n.li,{children:"The token price of the bid must be larger than the minimum price of the round."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the mutation increases the bid in the round with ID ",(0,t.jsx)(n.code,{children:"abcd1234"}),", increasing the token amount to 150 and the token price to 0.6, using Bitcoin (BTC) as the payment method. The return value includes the details of the updated bid."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);