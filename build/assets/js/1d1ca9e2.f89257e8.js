"use strict";(self.webpackChunkdocs_orbvpn_com=self.webpackChunkdocs_orbvpn_com||[]).push([[2803],{121:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var n=t(4848),o=t(8453);const s={},a=void 0,c={id:"api/Notification/Get All Notification Types",title:"Get All Notification Types",description:"The getNotificationTypes query is used to retrieve the list of all available notification types in the system.",source:"@site/docs/api/Notification/Get All Notification Types.md",sourceDirName:"api/Notification",slug:"/api/Notification/Get All Notification Types",permalink:"/docs/api/Notification/Get All Notification Types",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/Notification/Get All Notification Types.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Add New Notification Type",permalink:"/docs/api/Notification/Add New Notification Type"},next:{title:"Get All Unread Notifications",permalink:"/docs/api/Notification/Get All Unread Notifications"}},r={},l=[{value:"Query: <code>getNotificationTypes</code>",id:"query-getnotificationtypes",level:3},{value:"Schema:",id:"schema",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example Query",id:"example-query",level:3},{value:"Return",id:"return-1",level:3}];function d(e){const i={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"getNotificationTypes"})," query is used to retrieve the list of all available notification types in the system."]}),"\n",(0,n.jsxs)(i.h3,{id:"query-getnotificationtypes",children:["Query: ",(0,n.jsx)(i.code,{children:"getNotificationTypes"})]}),"\n",(0,n.jsx)(i.h4,{id:"schema",children:"Schema:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:"getNotificationTypes: [NotificationType]\n"})}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"None"}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"return",children:"Return"}),"\n",(0,n.jsxs)(i.p,{children:["The query returns a list of ",(0,n.jsx)(i.code,{children:"NotificationType"})," objects representing all available notification types."]}),"\n",(0,n.jsx)(i.h3,{id:"example-query",children:"Example Query"}),"\n",(0,n.jsxs)(i.p,{children:["The following is an example of how to use the ",(0,n.jsx)(i.code,{children:"getNotificationTypes"})," query to retrieve the list of all notification types:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:"query {\n  getNotificationTypes {\n    type,\n    index\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h3,{id:"return-1",children:"Return"}),"\n",(0,n.jsxs)(i.p,{children:["The example returns a list of ",(0,n.jsx)(i.code,{children:"NotificationType"})," objects with details such as ",(0,n.jsx)(i.code,{children:"type"})," and ",(0,n.jsx)(i.code,{children:"index"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["In this example, the query retrieves the list of all notification types. Each ",(0,n.jsx)(i.code,{children:"NotificationType"})," object in the returned list includes details like ",(0,n.jsx)(i.code,{children:"type"})," and ",(0,n.jsx)(i.code,{children:"index"}),"."]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>c});var n=t(6540);const o={},s=n.createContext(o);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);