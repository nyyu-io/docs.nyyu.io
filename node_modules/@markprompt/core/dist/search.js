import defaults from 'defaults';
import { DEFAULT_OPTIONS } from './index.js';
import { getErrorMessage, isAbortError } from './utils.js';
export const DEFAULT_SUBMIT_SEARCH_QUERY_OPTIONS = {
    limit: 8,
};
/**
 * Submit a search query to the Markprompt Search API.
 * @param query - Search query
 * @param projectKey - Project key for the project
 * @param [options] - Optional parameters
 * @returns Search results
 */
export async function submitSearchQuery(query, projectKey, options = {}) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { limit = DEFAULT_SUBMIT_SEARCH_QUERY_OPTIONS.limit, apiUrl } = options ?? {};
        const resolvedOptions = defaults({ limit, apiUrl }, {
            ...DEFAULT_OPTIONS,
            ...DEFAULT_SUBMIT_SEARCH_QUERY_OPTIONS,
        });
        const params = new URLSearchParams({
            query,
            projectKey,
            limit: String(resolvedOptions.limit),
        });
        const res = await fetch(`${resolvedOptions.apiUrl}/search?${params.toString()}`, {
            method: 'GET',
            signal: options?.signal,
            headers: new Headers({
                'X-Markprompt-API-Version': '2023-12-01',
            }),
        });
        if (!res.ok) {
            const message = await getErrorMessage(res);
            throw new Error(`Failed to fetch search results: ${message || 'Unknown error'}`);
        }
        return res.json();
    }
    catch (error) {
        if (isAbortError(error)) {
            // do nothing on AbortError's, this is expected
            return undefined;
        }
        else {
            throw error;
        }
    }
}
/**
 * Submit a search query to the Algolia Docsearch API.
 * @param query - Search query
 * @param [options] - Optional parameters
 * @returns Search results
 */
export async function submitAlgoliaDocsearchQuery(query, options) {
    try {
        const provider = options?.provider;
        if (provider?.name !== 'algolia') {
            throw new Error(`Unknown provider: ${provider?.name}`);
        }
        const { limit = DEFAULT_SUBMIT_SEARCH_QUERY_OPTIONS.limit } = options ?? {};
        const res = await fetch(`https://${provider.appId}-dsn.algolia.net/1/indexes/${provider.indexName}/query`, {
            method: 'POST',
            body: JSON.stringify({
                query,
                hitsPerPage: limit,
                getRankingInfo: 1,
                ...options?.provider?.searchParameters,
            }),
            signal: options?.signal,
            headers: {
                'X-Algolia-API-Key': provider.apiKey,
                'X-Algolia-Application-Id': provider.appId,
            },
        });
        if (!res.ok) {
            const message = await getErrorMessage(res);
            throw new Error(`Failed to fetch search results: ${message || 'Unknown error'}`);
        }
        return res.json();
    }
    catch (error) {
        if (isAbortError(error)) {
            // do nothing on AbortError's, this is expected
            return undefined;
        }
        else {
            throw error;
        }
    }
}
//# sourceMappingURL=search.js.map