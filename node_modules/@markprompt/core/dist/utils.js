export const getErrorMessage = async (res) => {
    const text = await res.text();
    try {
        const json = JSON.parse(text);
        return json?.error ?? text;
    }
    catch {
        return text;
    }
};
export const parseEncodedJSONHeader = (response, name) => {
    try {
        const headerValue = response.headers.get(name);
        if (headerValue) {
            const headerArray = new Uint8Array(headerValue.split(',').map(Number));
            const decoder = new TextDecoder();
            const decodedValue = decoder.decode(headerArray);
            return JSON.parse(decodedValue);
        }
    }
    catch (e) {
        // Do nothing
    }
    return undefined;
};
export function isAbortError(err) {
    return ((err instanceof DOMException && err.name === 'AbortError') ||
        (err instanceof Error && err.message.includes('AbortError')));
}
export function isFileSectionReferences(data) {
    return (Array.isArray(data) &&
        Boolean(data[0]?.file?.path) &&
        Boolean(data[0]?.file?.source?.type));
}
export function isMarkpromptMetadata(json) {
    return (typeof json === 'object' &&
        json !== null &&
        (('threadId' in json && typeof json.threadId === 'string') ||
            ('messageId' in json && typeof json.messageId === 'string') ||
            ('references' in json && isFileSectionReferences(json.references))));
}
export function isChatCompletion(json) {
    return (typeof json === 'object' &&
        json !== null &&
        'object' in json &&
        json.object === 'chat.completion');
}
export const isChatCompletionMessage = (obj) => {
    return (typeof obj === 'object' &&
        obj !== null &&
        'content' in obj &&
        (typeof obj.content === 'string' || obj.content === null) &&
        'role' in obj &&
        obj.role === 'assistant');
};
export const isToolCall = (tool_call) => {
    return (typeof tool_call === 'object' &&
        tool_call !== null &&
        'id' in tool_call &&
        typeof tool_call.id === 'string' &&
        'type' in tool_call &&
        tool_call.type === 'function' &&
        'function' in tool_call);
};
export const isToolCalls = (tool_calls) => {
    return Array.isArray(tool_calls) && tool_calls.every(isToolCall);
};
export const isChatCompletionChunk = (json) => {
    return (typeof json === 'object' &&
        json !== null &&
        'object' in json &&
        typeof json.object === 'string' &&
        json.object === 'chat.completion.chunk');
};
export const isKeyOf = (obj, key) => key in obj;
export const isNoStreamingData = (data) => {
    return typeof data === 'object' && data !== null && 'text' in data;
};
//# sourceMappingURL=utils.js.map