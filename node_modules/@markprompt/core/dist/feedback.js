import defaults from 'defaults';
import { DEFAULT_OPTIONS } from './index.js';
const allowedOptionKeys = ['signal', 'apiUrl'];
export const DEFAULT_SUBMIT_FEEDBACK_OPTIONS = {};
export async function submitFeedback(body, projectKey, options = {}) {
    if (!projectKey) {
        throw new Error('A projectKey is required.');
    }
    const allowedOptions = Object.fromEntries(Object.entries(options ?? {}).filter(([key]) => allowedOptionKeys.includes(key)));
    const { signal, ...cloneableOpts } = allowedOptions ?? {};
    const resolvedOptions = defaults(cloneableOpts, {
        ...DEFAULT_OPTIONS,
        ...DEFAULT_SUBMIT_FEEDBACK_OPTIONS,
    });
    try {
        const response = await fetch(`${resolvedOptions.apiUrl}/messages/${body.messageId}`, {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
                'X-Markprompt-API-Version': '2024-03-23',
            }),
            body: JSON.stringify({
                projectKey,
                vote: parseInt(body.feedback.vote),
            }),
            signal: signal,
        });
        if (!response.ok) {
            const error = (await response.json())?.error;
            throw new Error(`Failed to submit feedback: ${error || 'Unknown error'}`);
        }
    }
    catch (error) {
        if (error instanceof DOMException && error.name === 'AbortError') {
            // do nothing on AbortError's, this is expected
            return undefined;
        }
        else {
            throw error;
        }
    }
}
export async function submitCSAT(body, projectKey, options = {}) {
    if (!projectKey) {
        throw new Error('A projectKey is required.');
    }
    const allowedOptions = Object.fromEntries(Object.entries(options ?? {}).filter(([key]) => allowedOptionKeys.includes(key)));
    const { signal, ...cloneableOpts } = allowedOptions ?? {};
    const resolvedOptions = defaults(cloneableOpts, {
        ...DEFAULT_OPTIONS,
        ...DEFAULT_SUBMIT_FEEDBACK_OPTIONS,
    });
    try {
        const response = await fetch(`${resolvedOptions.apiUrl}/threads/${body.threadId}`, {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
                'X-Markprompt-API-Version': '2024-03-23',
            }),
            body: JSON.stringify({ projectKey, csat: body.csat }),
            signal: signal,
        });
        if (!response.ok) {
            const error = (await response.json())?.error;
            throw new Error(`Failed to submit feedback: ${error || 'Unknown error'}`);
        }
    }
    catch (error) {
        if (error instanceof DOMException && error.name === 'AbortError') {
            // do nothing on AbortError's, this is expected
            return undefined;
        }
        else {
            throw error;
        }
    }
}
//# sourceMappingURL=feedback.js.map