import type { FileSectionReference } from '@markprompt/core';
import * as Dialog from '@radix-ui/react-dialog';
import { type ComponentPropsWithRef, type ComponentPropsWithoutRef, type ElementType, type ReactElement, type ReactNode, type ComponentType, type FormEventHandler } from 'react';
import Markdown from 'react-markdown';
import type { ChatLoadingState } from '../index.js';
import type { MarkpromptDisplay, MarkpromptOptions, PolymorphicComponentPropWithRef, SearchResultComponentProps } from '../types.js';
type RootProps = Dialog.DialogProps & {
    display?: MarkpromptDisplay;
};
/**
 * The Markprompt context provider and dialog root.
 */
declare function Root(props: RootProps): ReactElement;
type DialogTriggerProps = ComponentPropsWithRef<typeof Dialog.Trigger>;
/**
 * A button to open the Markprompt dialog.
 */
declare const DialogTrigger: import("react").ForwardRefExoticComponent<Omit<Dialog.DialogTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
type PortalProps = ComponentPropsWithoutRef<typeof Dialog.Portal>;
/**
 * The Markprompt dialog portal.
 */
declare function Portal(props: PortalProps): ReactElement;
declare namespace Portal {
    var displayName: string;
}
type OverlayProps = ComponentPropsWithRef<typeof Dialog.Overlay>;
/**
 * The Markprompt dialog overlay.
 */
declare const Overlay: import("react").ForwardRefExoticComponent<Omit<Dialog.DialogOverlayProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
type ContentProps = ComponentPropsWithRef<typeof Dialog.Content>;
/**
 * The Markprompt dialog content.
 */
declare const Content: import("react").ForwardRefExoticComponent<Omit<Dialog.DialogContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export interface BrandingProps {
    /**
     * Show the Markprompt footer.
     **/
    branding?: {
        show?: boolean;
        type?: 'plain' | 'text';
    };
}
/**
 * The Markprompt plain content.
 */
declare const PlainContent: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
type CloseProps = ComponentPropsWithRef<typeof Dialog.Close>;
/**
 * A button to close the Markprompt dialog and abort an ongoing request.
 */
declare const Close: import("react").ForwardRefExoticComponent<Omit<Dialog.DialogCloseProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
type TitleProps = ComponentPropsWithRef<typeof Dialog.Title> & {
    hide?: boolean;
};
declare const Title: import("react").ForwardRefExoticComponent<Omit<TitleProps, "ref"> & import("react").RefAttributes<HTMLHeadingElement>>;
type DescriptionProps = ComponentPropsWithRef<typeof Dialog.Description> & {
    hide?: boolean;
};
/**
 * A visually hidden aria description.
 */
declare const Description: import("react").ForwardRefExoticComponent<Omit<DescriptionProps, "ref"> & import("react").RefAttributes<HTMLParagraphElement>>;
type FormProps = ComponentPropsWithRef<'form'>;
/**
 * A form which, when submitted, submits the current prompt.
 */
declare const Form: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, "ref"> & {
    ref?: ((instance: HTMLFormElement | null) => void) | import("react").RefObject<HTMLFormElement> | null | undefined;
}, "ref"> & import("react").RefAttributes<HTMLFormElement>>;
interface PromptInnerProps {
    /** The label for the input. */
    label?: ReactNode;
    /** The class name of the label element. */
    labelClassName?: string;
    /** The class name of the text area container. */
    textAreaContainerClassName?: string;
    /** The class name of the send button element. */
    sendButtonClassName?: string;
    /** The label for the submit button. */
    buttonLabel?: string;
    /** Show an icon next to the send button. */
    showSubmitButton?: boolean;
    /** If the answer is loading. */
    isLoading?: boolean;
    /** Icon for the button. */
    Icon?: ReactNode;
    /** Minimum number of rows. */
    minRows?: number;
    /** Use an input field instead of a text area. */
    onSubmit?: FormEventHandler<HTMLFormElement>;
    /** Submit on enter. */
    submitOnEnter?: boolean;
}
type PromptProps = ComponentPropsWithRef<'input'> & PromptInnerProps;
/**
 * The Markprompt input prompt. User input will update the prompt in the Markprompt context.
 */
declare const Prompt: import("react").ForwardRefExoticComponent<Omit<PromptProps, "ref"> & import("react").RefAttributes<HTMLTextAreaElement>>;
interface CopyContentButtonProps {
    content: string;
    className?: string;
}
declare function CopyContentButton(props: CopyContentButtonProps): ReactElement;
declare namespace CopyContentButton {
    var displayName: string;
}
type AnswerProps = Omit<ComponentPropsWithoutRef<typeof Markdown>, 'children'> & {
    answer: string;
    state?: ChatLoadingState;
    copyButtonClassName?: string;
    linkAs?: string | ComponentType<any>;
};
/**
 * Render the markdown answer from the Markprompt API.
 */
declare function Answer(props: AnswerProps): ReactElement;
declare namespace Answer {
    var displayName: string;
}
interface AutoScrollerInnerProps {
    /**
     * Whether or not to enable automatic scrolling.
     *
     * @default true
     */
    autoScroll?: boolean;
    /**
     * The behaviour to use for scrolling.
     *
     * @default 'smooth'
     */
    scrollBehavior?: ScrollBehavior;
    /**
     * The element scrolls when this prop changes, unless scroll
     * lock is enabled.
     * @default undefined
     * */
    scrollTrigger?: unknown;
    /**
     * The element scrolls when this prop changes, overriding
     * scroll lock.
     * @default number
     * */
    discreteScrollTrigger?: number;
}
type AutoScrollerProps = ComponentPropsWithoutRef<'div'> & AutoScrollerInnerProps;
/**
 * A component that automatically scrolls to the bottom.
 */
declare const AutoScroller: import("react").NamedExoticComponent<AutoScrollerProps>;
export interface ReferencesInnerProps {
    /**
     * The wrapper component to render.
     * @default 'ul'
     */
    RootComponent?: ElementType;
    /**
     * The component to render for each reference.
     * @default 'li'
     */
    ReferenceComponent?: ElementType;
    /**
     * The references to display.
     */
    references: FileSectionReference[];
}
interface ReferencesProps<TRoot extends ElementType, TReference extends ElementType<{
    reference: FileSectionReference;
    index: number;
}>> {
    /**
     * The wrapper component to render.
     * @default 'ul'
     */
    RootComponent?: TRoot;
    /**
     * The component to render for each reference.
     * @default 'li'
     */
    ReferenceComponent?: TReference;
    references: FileSectionReference[];
}
/**
 * Render the references that Markprompt returned.
 */
declare const ForwardedReferences: import("react").ForwardRefExoticComponent<ReferencesProps<ElementType, ComponentType<{
    reference: FileSectionReference;
    index: number;
}>> & import("react").RefAttributes<unknown>>;
type SearchResultsProps = PolymorphicComponentPropWithRef<'ul', {
    label?: string;
    SearchResultComponent?: ElementType<SearchResultComponentProps & {
        index?: number;
    }>;
    searchResults: SearchResultComponentProps[];
    searchOptions?: MarkpromptOptions['search'];
    headingClassName?: string;
}>;
declare const SearchResults: import("react").ForwardRefExoticComponent<Omit<SearchResultsProps, "ref"> & import("react").RefAttributes<HTMLUListElement>>;
type SearchResultProps = PolymorphicComponentPropWithRef<'li', SearchResultComponentProps & {
    onMouseMove?: () => void;
    onClick?: () => void;
}>;
declare const SearchResult: import("react").ForwardRefExoticComponent<Omit<SearchResultProps, "ref"> & import("react").RefAttributes<HTMLLIElement>>;
interface ErrorMessageProps {
    className?: string;
    children: ReactNode;
}
declare function ErrorMessage(props: ErrorMessageProps): ReactElement;
declare namespace ErrorMessage {
    var displayName: string;
}
export { Answer, AutoScroller, Close, Content, CopyContentButton, Description, DialogTrigger, ErrorMessage, Form, Overlay, PlainContent, Portal, Prompt, ForwardedReferences as References, Root, SearchResult, SearchResults, Title, type AnswerProps, type AutoScrollerProps, type CloseProps, type ContentProps, type DescriptionProps, type DialogTriggerProps, type ErrorMessageProps, type FormProps, type OverlayProps, type PortalProps, type PromptProps, type ReferencesProps, type RootProps, type SearchResultProps, type SearchResultsProps, type TitleProps, };
//# sourceMappingURL=headless.d.ts.map