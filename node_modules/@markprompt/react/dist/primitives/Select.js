import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { autoUpdate, flip, offset, shift, useFloating, } from '@floating-ui/react';
import { VisuallyHidden } from '@radix-ui/react-visually-hidden';
import clsx from 'clsx';
import { useSelect } from 'downshift';
import {} from 'react';
export function Select(props) {
    const { className, itemClassName, menuClassName, toggleClassName, label, items, toggle, itemToChildren, itemToString, disabled, ...useSelectProps } = props;
    const { getItemProps, getLabelProps, getMenuProps, getToggleButtonProps, highlightedIndex, isOpen, selectedItem, } = useSelect({
        items,
        itemToString,
        ...useSelectProps,
    });
    const { refs, floatingStyles } = useFloating({
        open: isOpen,
        middleware: [offset(8), flip(), shift()],
        whileElementsMounted: autoUpdate,
        placement: 'top-start',
    });
    return (_jsxs("div", { className: clsx('MarkpromptSelect', className), children: [_jsx(VisuallyHidden, { asChild: true, children: _jsx("label", { ...getLabelProps(), children: label }) }), _jsx("button", { type: "button", className: clsx('MarkpromptSelectToggle', toggleClassName), ...getToggleButtonProps({ ref: refs.setReference }), disabled: disabled, children: toggle }), _jsx("ul", { className: clsx('MarkpromptSelectMenu', menuClassName), style: floatingStyles, "data-open": isOpen, ...getMenuProps({ ref: refs.setFloating }), children: isOpen &&
                    items.map((item, index) => (_jsx("li", { className: itemClassName, "data-highlighted": highlightedIndex === index, "data-selected": itemToString(selectedItem) === itemToString(item), ...getItemProps({ item, index }), children: itemToChildren ? itemToChildren(item) : itemToString(item) }, `${itemToString(item)}-${index}`))) })] }));
}
//# sourceMappingURL=Select.js.map