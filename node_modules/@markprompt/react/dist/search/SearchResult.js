import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, forwardRef, memo, useMemo } from 'react';
import { FileTextIcon, HashIcon } from '../icons.js';
import {} from '../index.js';
// Source: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/src/components/highlight-matches.tsx
const HighlightMatches = memo(function HighlightMatches({ value, match, }) {
    if (!match || match === '')
        return _jsx(_Fragment, { children: value });
    const splitText = value ? value.split('') : [];
    const escapedSearch = match.trim().replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
    const regexp = RegExp('(' + escapedSearch.replaceAll(' ', '|') + ')', 'ig');
    let result;
    let id = 0;
    let index = 0;
    const res = [];
    if (value) {
        while ((result = regexp.exec(value)) !== null) {
            res.push(_jsxs(Fragment, { children: [splitText.splice(0, result.index - index).join(''), _jsx("span", { className: "MarkpromptMatch", children: splitText.splice(0, regexp.lastIndex - result.index).join('') })] }, id++));
            index = regexp.lastIndex;
        }
    }
    return (_jsxs(_Fragment, { children: [res, splitText.join('')] }));
});
function cleanString(text) {
    return text
        ?.replace(/\|/gi, '')
        .replace(/-{2,}/gi, '')
        .replace(/-{2,}/gi, '')
        .replace(/\s{2,}/gi, ' ');
}
const SearchResult = forwardRef((props, ref) => {
    const { href, title, heading, subtitle, onMouseMove, onClick, searchQuery, linkAs, ...rest } = props;
    const Link = linkAs ?? 'a';
    const cleanedTitle = useMemo(() => {
        return cleanString(title);
    }, [title]);
    const cleanedSubtitle = useMemo(() => {
        return cleanString(subtitle);
    }, [subtitle]);
    return (_jsx("li", { ...rest, ref: ref, className: "MarkpromptSearchResult", children: _jsx(Link, { href: href, className: "MarkpromptSearchResultLink", children: _jsxs("div", { onMouseMove: onMouseMove, onClick: onClick, className: "MarkpromptSearchResultContainer", children: [_jsx("div", { className: "MarkpromptSearchResultIconWrapper MarkpromptSearchResultIconWrapperBordered", children: href?.includes('#') ? (_jsx(HashIcon, { className: "MarkpromptSearchResultIcon" })) : (_jsx(FileTextIcon, { className: "MarkpromptSearchResultIcon" })) }), _jsxs("div", { className: "MarkpromptSearchResultContentWrapper", children: [heading && (_jsx("div", { className: "MarkpromptSearchResultHeading", children: _jsx(HighlightMatches, { value: heading, match: searchQuery }) })), _jsx("div", { className: "MarkpromptSearchResultTitle", children: _jsx(HighlightMatches, { value: cleanedTitle, match: searchQuery }) }), cleanedSubtitle && (_jsx("div", { className: "MarkpromptSearchResultSubtitle", children: _jsx(HighlightMatches, { value: cleanedSubtitle, match: searchQuery }) }))] })] }) }) }));
});
SearchResult.displayName = 'Markprompt.SearchResult';
export { SearchResult };
//# sourceMappingURL=SearchResult.js.map