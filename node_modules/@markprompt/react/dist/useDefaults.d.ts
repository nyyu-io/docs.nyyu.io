type DeepMerge<T, U> = T extends {
    [key: string]: unknown;
} ? U extends {
    [key: string]: unknown;
} ? {
    [K in keyof T | keyof U]: K extends keyof T ? K extends keyof U ? DeepMerge<T[K], U[K]> : T[K] : K extends keyof U ? U[K] : never;
} : T : U extends undefined ? T extends undefined ? U : T : U;
export declare function useDefaults<T extends {
    [key: string]: unknown;
}, U extends {
    [key: string]: unknown;
} | undefined = undefined>(options: T, defaultOptions: U): U extends undefined ? T : DeepMerge<U, T>;
export {};
//# sourceMappingURL=useDefaults.d.ts.map