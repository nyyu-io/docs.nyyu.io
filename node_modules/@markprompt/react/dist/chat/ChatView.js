import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable @typescript-eslint/no-explicit-any */
import {} from '@markprompt/core';
import { ChatViewForm } from './ChatViewForm.js';
import { Messages } from './Messages.js';
import { useChatStore } from './store.js';
import { ThreadSidebar } from './ThreadSidebar.js';
import { DEFAULT_MARKPROMPT_OPTIONS } from '../constants.js';
import { ChevronLeftIcon } from '../icons.js';
import { RichText } from '../ui/rich-text.js';
import { useDefaults } from '../useDefaults.js';
export function ChatView(props) {
    const { apiUrl, activeView, projectKey, showBack, onDidPressBack, integrations, handleCreateTicket, linkAs, submitOnEnter, branding, display, minInputRows, } = props;
    if (!projectKey) {
        throw new Error('Markprompt: a project key is required. Make sure to pass your Markprompt project key to <ChatView />.');
    }
    // We are also merging defaults in the Markprompt component, but this makes
    // sure that standalone ChatView components also have defaults as expected.
    const chatOptions = useDefaults({ ...props.chatOptions }, DEFAULT_MARKPROMPT_OPTIONS.chat);
    const feedbackOptions = useDefaults({ ...props.feedbackOptions }, DEFAULT_MARKPROMPT_OPTIONS.feedback);
    const referencesOptions = useDefaults({ ...props.referencesOptions }, DEFAULT_MARKPROMPT_OPTIONS.references);
    const didAcceptDisclaimer = useChatStore((state) => state.didAcceptDisclaimer);
    const setDidAcceptDisclaimer = useChatStore((state) => state.setDidAcceptDisclaimer);
    return (_jsxs("div", { className: "MarkpromptChatView", children: [_jsx(ThreadSidebar, { display: display }), _jsx("div", { className: "MarkpromptChatViewChatContainer", children: _jsxs("div", { className: "MarkpromptChatViewChat", children: [showBack ? (_jsx("div", { className: "MarkpromptChatViewNavigation", children: _jsx("button", { className: "MarkpromptGhostButton", onClick: onDidPressBack, children: _jsx(ChevronLeftIcon, { style: { width: 16, height: 16 }, strokeWidth: 2.5 }) }) })) : (
                        // Keep this for the grid template rows layout
                        _jsx("div", {})), !didAcceptDisclaimer && chatOptions?.disclaimerView ? (_jsx("div", { className: "MarkpromptDisclaimerView", children: _jsxs("div", { className: "MarkpromptDisclaimerViewMessage", children: [_jsx(RichText, { children: chatOptions.disclaimerView.message }), _jsx("button", { className: "MarkpromptButton", "data-variant": "primary", type: "submit", onClick: () => {
                                            setDidAcceptDisclaimer(true);
                                        }, children: chatOptions.disclaimerView.cta || 'I agree' })] }) })) : (_jsx(Messages, { apiUrl: apiUrl, chatOptions: chatOptions, feedbackOptions: feedbackOptions, integrations: integrations, projectKey: projectKey, referencesOptions: referencesOptions, handleCreateTicket: handleCreateTicket, linkAs: linkAs, branding: branding })), _jsx(ChatViewForm, { activeView: activeView, chatOptions: chatOptions, minInputRows: minInputRows, submitOnEnter: submitOnEnter })] }) })] }));
}
//# sourceMappingURL=ChatView.js.map