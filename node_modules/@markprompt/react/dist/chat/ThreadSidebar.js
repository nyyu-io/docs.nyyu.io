import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { selectProjectThreads, useChatStore } from './store.js';
import { PlusIcon } from '../icons.js';
import { markdownToString } from '../utils.js';
export function ThreadSidebar(props) {
    const selectedThreadId = useChatStore((state) => state.threadId);
    const threads = useChatStore(selectProjectThreads);
    const selectThread = useChatStore((state) => state.selectThread);
    const sortedThreads = useMemo(() => {
        if (props.display === 'plain') {
            return threads.slice().reverse();
        }
        return threads;
    }, [threads, props.display]);
    return (_jsxs("aside", { className: "MarkpromptChatViewSidebar", children: [_jsx("p", { className: "MarkpromptChatViewSidebarTitle", children: _jsx("strong", { children: "Chats" }) }), _jsxs("ul", { className: "MarkpromptChatThreadList", children: [_jsx("li", { className: "MarkpromptChatThreadListItem", children: _jsx("button", { onClick: () => selectThread(undefined), children: _jsxs("span", { className: "MarkpromptNewChatOption", children: [_jsx(PlusIcon, { className: "MarkpromptNewChatIcon" }), " New chat"] }) }) }), sortedThreads.map(([threadId, { messages }], index) => (_jsx("li", { "data-selected": selectedThreadId === threadId, className: "MarkpromptChatThreadListItem", children: _jsxs("button", { onClick: () => selectThread(threadId), children: [_jsx("p", { children: _jsx("strong", { children: messages[0]?.content ?? 'Unknown thread' }) }), messages[1]?.content && (_jsx("p", { children: markdownToString(messages[1]?.content, 70) }))] }) }, `${threadId}-${index}`)))] })] }));
}
//# sourceMappingURL=ThreadSidebar.js.map