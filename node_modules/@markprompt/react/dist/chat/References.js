import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useMemo, } from 'react';
import { DEFAULT_MARKPROMPT_OPTIONS } from '../constants.js';
import * as Markprompt from '../primitives/headless.js';
export const Reference = (props) => {
    const { getHref = DEFAULT_MARKPROMPT_OPTIONS.references.getHref, getLabel = DEFAULT_MARKPROMPT_OPTIONS.references.getLabel, index, reference, transformReferenceId, onDidSelectReference, } = props;
    const referenceHrefLabel = useMemo(() => {
        // Backwards compatibility
        if (transformReferenceId) {
            const t = transformReferenceId(reference.file.path);
            return { href: t.href, label: t.text };
        }
        return {
            href: getHref?.(reference),
            label: getLabel?.(reference),
        };
    }, [transformReferenceId, getHref, reference, getLabel]);
    const LinkComponent = props.linkAs ?? 'a';
    return (_jsx("li", { className: "MarkpromptReference", style: {
            animationDelay: `${100 * index}ms`,
        }, children: _jsx(LinkComponent, { href: referenceHrefLabel.href, onClick: onDidSelectReference, children: referenceHrefLabel.label }) }, referenceHrefLabel.href));
};
const References = (props) => {
    const { getHref, getLabel, heading = DEFAULT_MARKPROMPT_OPTIONS.references.heading, transformReferenceId, references, state, linkAs, } = props;
    const ReferenceComponent = useCallback((props) => (_jsx(Reference, { getHref: getHref, getLabel: getLabel, 
        // Backwards compatibility
        transformReferenceId: transformReferenceId, linkAs: linkAs, ...props })), [getHref, getLabel, transformReferenceId, linkAs]);
    let adjustedState = state;
    if (state === 'done' && references.length === 0) {
        adjustedState = 'indeterminate';
    }
    return (_jsxs("div", { style: {
            opacity: adjustedState === 'indeterminate' ? 0 : 1,
            transform: `translateY(${adjustedState === 'indeterminate' ? '100%' : '0%'})`,
        }, className: "MarkpromptReferences", "data-loading-state": adjustedState, role: "status", children: [state !== 'preload' && _jsx("p", { children: heading }), (state === 'streaming-answer' || state === 'done') && (_jsx(Markprompt.References, { ReferenceComponent: ReferenceComponent, references: references }))] }));
};
export { References };
//# sourceMappingURL=References.js.map