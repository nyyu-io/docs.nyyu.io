import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { DEFAULT_OPTIONS, isToolCalls } from '@markprompt/core';
import { useMemo } from 'react';
import { DefaultToolCallsConfirmation } from './DefaultToolCallsConfirmation.js';
import { MessageAnswer } from './MessageAnswer.js';
import { useChatStore } from './store.js';
import { Feedback } from '../feedback/Feedback.js';
import { useFeedback } from '../feedback/useFeedback.js';
import { SparklesIcon } from '../icons.js';
export function AssistantMessage(props) {
    const { apiUrl, feedbackOptions, message, projectKey, chatOptions, messageOnly, showFeedbackAlways, } = props;
    const toolCalls = useMemo(() => (isToolCalls(message.tool_calls) ? message.tool_calls : undefined), [message.tool_calls]);
    const messages = useChatStore((state) => state.messages);
    const submitToolCalls = useChatStore((state) => state.submitToolCalls);
    const toolCallsByToolCallId = useChatStore((state) => Object.fromEntries(Object.entries(state.toolCallsByToolCallId).filter(([id]) => toolCalls?.some((x) => x.id === id))));
    const { submitFeedback, abort: abortFeedbackRequest } = useFeedback({
        apiUrl: apiUrl || DEFAULT_OPTIONS.apiUrl,
        projectKey,
        feedbackOptions,
    });
    const confirmToolCalls = () => {
        submitToolCalls(message);
    };
    const ToolCallConfirmation = useMemo(() => chatOptions.ToolCallsConfirmation ?? DefaultToolCallsConfirmation, [chatOptions.ToolCallsConfirmation]);
    if (message.error) {
        const ErrorText = chatOptions.errorText;
        return (_jsx("div", { className: "MarkpromptError", children: ErrorText && _jsx(ErrorText, { error: message.error }) }));
    }
    return (_jsxs("div", { className: "MarkpromptMessageAnswerContainer", "data-compact": messageOnly, children: [chatOptions?.avatars?.visible && (_jsx("div", { className: "MarkpromptMessageAvatarContainer", "data-role": "assistant", children: !chatOptions.avatars?.assistant ? (_jsx(SparklesIcon, { className: "MarkpromptMessageAvatar", "data-type": "icon" })) : typeof chatOptions.avatars?.assistant === 'string' ? (_jsx("img", { src: chatOptions.avatars.assistant, className: "MarkpromptMessageAvatarImage" })) : (_jsx("div", { className: "MarkpromptMessageAvatar", children: _jsx(chatOptions.avatars.assistant, { className: "MarkpromptMessageAvatar" }) })) })), _jsxs("div", { style: { width: '100%', overflow: 'hidden' }, children: [_jsx(MessageAnswer, { state: message.state, linkAs: props.linkAs, children: message.content ?? '' }), Array.isArray(toolCalls) && (_jsx(ToolCallConfirmation, { toolCalls: toolCalls, tools: chatOptions.tools, toolCallsStatus: toolCallsByToolCallId, confirmToolCalls: confirmToolCalls })), !messageOnly &&
                        (chatOptions.showCopy || feedbackOptions?.enabled) &&
                        message.state === 'done' && (_jsx(Feedback, { message: message.content ?? '', variant: "icons", "data-show-feedback-always": showFeedbackAlways, className: "MarkpromptPromptFeedback", submitFeedback: (feedback, messageId) => {
                            submitFeedback(feedback, messageId);
                            feedbackOptions.onFeedbackSubmit?.(feedback, messages, messageId);
                        }, abortFeedbackRequest: abortFeedbackRequest, messageId: message.messageId, heading: feedbackOptions.heading, showFeedback: !!feedbackOptions?.enabled, showVotes: feedbackOptions.votes, showCopy: chatOptions.showCopy }))] })] }));
}
//# sourceMappingURL=AssistantMessage.js.map