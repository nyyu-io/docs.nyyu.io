import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useMemo } from 'react';
import { AssistantMessage } from './AssistantMessage.js';
import { DefaultMessage, DefaultView } from './DefaultView.js';
import { MessagePrompt } from './MessagePrompt.js';
import { References } from './References.js';
import { useChatStore } from './store.js';
import { CSATPicker } from '../feedback/csat-picker.js';
import { ChatIconOutline } from '../icons.js';
import { Branding } from '../primitives/branding.js';
import * as BaseMarkprompt from '../primitives/headless.js';
export function Messages(props) {
    const { apiUrl, chatOptions, feedbackOptions, integrations, referencesOptions, projectKey, handleCreateTicket, linkAs, branding = { show: true, type: 'plain' }, } = props;
    const messages = useChatStore((state) => state.messages);
    const threadId = useChatStore((state) => state.threadId);
    const submitChat = useChatStore((state) => state.submitChat);
    const welcomeMessage = useMemo(() => {
        const message = chatOptions.defaultView?.message;
        if (typeof message === 'string') {
            return message;
        }
        return undefined;
    }, [chatOptions.defaultView?.message]);
    if (!messages || messages.length === 0) {
        return (_jsx("div", { className: "MarkpromptMessages", children: _jsxs("div", { className: "MarkpromptDefaultViewContainer", children: [_jsx("div", { className: "MarkpromptDefaultViewBranding", children: branding.show && _jsx(Branding, { brandingType: branding.type }) }), _jsx(DefaultView, { ...props, onDidSelectPrompt: (prompt) => submitChat([{ role: 'user', content: prompt }]) })] }) }));
    }
    const lastAssistantMessageIndex = messages.findLastIndex((x) => x.role === 'assistant');
    return (_jsx("div", { className: "MarkpromptMessages", children: _jsxs(BaseMarkprompt.AutoScroller, { className: "MarkpromptAutoScroller", scrollTrigger: messages, discreteScrollTrigger: messages.length, children: [branding.show && _jsx(Branding, { brandingType: branding.type }), welcomeMessage && _jsx(DefaultMessage, { ...props }), messages.map((message, index) => {
                    const isLastMessage = index === messages.length - 1;
                    // Only show references for last message
                    const showReferences = isLastMessage &&
                        (!referencesOptions?.display ||
                            referencesOptions?.display === 'end') &&
                        message.references &&
                        message.references?.length > 0 &&
                        message.state === 'done';
                    return (_jsxs("div", { className: "MarkpromptMessage", "data-loading-state": message.state, children: [message.role === 'user' && (_jsx(MessagePrompt, { state: message.state, chatOptions: chatOptions, referencesOptions: referencesOptions, children: message.content ?? '' })), message.role === 'assistant' && (_jsx(AssistantMessage, { apiUrl: apiUrl, message: message, projectKey: projectKey, feedbackOptions: feedbackOptions, chatOptions: chatOptions, linkAs: linkAs, showFeedbackAlways: isLastMessage })), showReferences && (_jsx(References, { references: message.references || [], getHref: referencesOptions?.getHref, getLabel: referencesOptions?.getLabel, loadingText: referencesOptions?.loadingText, heading: referencesOptions?.heading, state: message.state, linkAs: linkAs })), integrations?.createTicket?.enabled &&
                                message.role === 'assistant' &&
                                message.state === 'done' &&
                                index === lastAssistantMessageIndex && (_jsxs("div", { className: "MarkpromptMessageCreateTicket", children: [_jsx("p", { className: "MarkpromptMessageSectionHeading", children: integrations.createTicket.messageText }), _jsxs("button", { className: "MarkpromptButton", onClick: handleCreateTicket, "data-variant": "outline", "aria-label": integrations.createTicket.messageButton?.hasText
                                            ? undefined
                                            : integrations.createTicket.messageButton?.text, children: [_jsx(ChatIconOutline, { className: "MarkpromptMenuIcon", "aria-hidden": true }), integrations.createTicket.messageButton?.hasText && (_jsx("span", { children: integrations.createTicket.messageButton?.text }))] })] })), threadId &&
                                message.role === 'assistant' &&
                                (message.state === 'done' || message.state === 'cancelled') &&
                                index === lastAssistantMessageIndex && (_jsx("div", { className: "MarkpromptMessageCSATContainer", children: _jsx(CSATPicker, { apiUrl: apiUrl, projectKey: projectKey, threadId: threadId, feedbackOptions: feedbackOptions }) }))] }, message.id));
                }), _jsx("div", { style: { width: '100%', height: 40 } })] }) }));
}
//# sourceMappingURL=Messages.js.map