import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useCallback, useEffect, useMemo, useState, } from 'react';
import { ChatView } from './chat/ChatView.js';
import { ChatProvider, useChatStore } from './chat/store.js';
import { CreateTicketView, CustomCaseFormRenderer, } from './CreateTicketView.js';
import { ChevronLeftIcon, LoadingIcon } from './icons.js';
import { DEFAULT_MARKPROMPT_OPTIONS } from './index.js';
import { GlobalStoreProvider, useGlobalStore, } from './store.js';
import { NavigationMenu } from './ui/navigation-menu.js';
import { RichText } from './ui/rich-text.js';
import { useDefaults } from './useDefaults.js';
export function TicketDeflectionForm(props) {
    const { defaultView = 'chat', isStandalone, CustomCaseForm } = props;
    const apiUrl = useGlobalStore((state) => state.options.apiUrl);
    const chat = useGlobalStore((state) => state.options.chat);
    const feedback = useGlobalStore((state) => state.options.feedback);
    const integrations = useGlobalStore((state) => state.options.integrations);
    const projectKey = useGlobalStore((state) => state.options.projectKey);
    const references = useGlobalStore((state) => state.options.references);
    const createTicketSummary = useGlobalStore((state) => state.tickets?.createTicketSummary);
    const threadId = useChatStore((state) => state.threadId);
    const messages = useChatStore((state) => state.messages);
    const selectThread = useChatStore((state) => state.selectThread);
    const [view, setView] = useState(defaultView);
    const [didTransitionViewOnce, setDidTransitionViewOnce] = useState(false);
    const [isCreatingTicketSummary, setIsCreatingTicketSummary] = useState(false);
    useEffect(() => {
        // Clear past thread
        selectThread(undefined);
    }, [selectThread]);
    const placeholder = useMemo(() => {
        const _placeholder = integrations?.createTicket?.chat?.placeholder;
        if (typeof _placeholder === 'string') {
            return _placeholder;
        }
        if (messages.length > 0) {
            return _placeholder?.[1];
        }
        return _placeholder?.[0];
    }, [messages.length, integrations?.createTicket?.chat?.placeholder]);
    useEffect(() => {
        if (view !== defaultView) {
            setDidTransitionViewOnce(true);
        }
    }, [view, defaultView]);
    const handleCreateTicketSummary = useCallback(async () => {
        if (!integrations?.createTicket?.enabled) {
            return;
        }
        if (!messages || messages.length === 0 || !threadId) {
            setView('ticket');
            return;
        }
        setIsCreatingTicketSummary(true);
        await createTicketSummary?.(threadId, messages);
        setIsCreatingTicketSummary(false);
        setView('ticket');
    }, [
        integrations?.createTicket?.enabled,
        messages,
        threadId,
        createTicketSummary,
    ]);
    const caseForm = CustomCaseForm ? (_jsx(CustomCaseFormRenderer, { CustomCaseForm: CustomCaseForm })) : (_jsx(CreateTicketView, { handleGoBack: () => setView('chat'), includeNav: false, includeCTA: true }));
    return (_jsxs("div", { className: "MarkpromptTicketDeflectionForm", "data-expanded": (messages && messages.length > 0) || view === 'ticket', "data-animate-shrink": didTransitionViewOnce, children: [!isStandalone && (_jsx(NavigationMenu, { title: integrations?.createTicket?.chat?.title, subtitle: integrations?.createTicket?.chat?.subtitle, close: { visible: true, hasIcon: true } })), _jsx("div", { style: { flexGrow: 1, overflow: 'hidden' }, children: view === 'chat' ? (_jsx(ChatView, { apiUrl: apiUrl, activeView: "chat", chatOptions: {
                        ...chat,
                        defaultView: undefined,
                        history: false,
                        placeholder,
                        buttonLabel: integrations?.createTicket?.chat?.buttonLabel,
                    }, feedbackOptions: feedback, projectKey: projectKey, referencesOptions: references, branding: { show: false }, submitOnEnter: false, minInputRows: 3 })) : (caseForm) }), _jsx("div", { className: "MarkpromptDialogFooter", children: view === 'chat' ? (_jsxs(_Fragment, { children: [_jsx(RichText, { children: integrations?.createTicket?.chat?.disclaimerView?.message || '' }), _jsxs("button", { className: "MarkpromptButton", "data-variant": "outline", disabled: isCreatingTicketSummary, onClick: () => handleCreateTicketSummary(), children: [isCreatingTicketSummary ? 'Creating case...' : 'Create case', isCreatingTicketSummary && (_jsx(LoadingIcon, { style: { width: 16, height: 16 } }))] })] })) : (_jsx(_Fragment, { children: _jsx("div", { style: {
                            display: 'flex',
                            justifyItems: 'start',
                            marginLeft: '-0.5rem',
                        }, children: _jsxs("div", { className: "MarkpromptIconLink", onClick: () => setView('chat'), children: [_jsx(ChevronLeftIcon, { className: "MarkpromptButtonIcon" }), "Back to help"] }) }) })) })] }));
}
export function StandaloneTicketDeflectionForm(props) {
    const { apiUrl, chat, feedback, integrations, references, projectKey } = props;
    const options = useDefaults({
        projectKey,
        apiUrl,
        chat,
        feedback,
        integrations: {
            ...integrations,
            createTicket: {
                ...integrations?.createTicket,
                // always enable the integration for the standalone form
                enabled: true,
            },
        },
        references,
    }, DEFAULT_MARKPROMPT_OPTIONS);
    return (_jsx(GlobalStoreProvider, { options: options, children: _jsx(ChatProvider, { projectKey: projectKey, apiUrl: apiUrl, chatOptions: chat, storeKey: "ticket-deflection", children: _jsx("div", { className: "MarkpromptStandaloneTicketDeflectionForm", children: _jsx(TicketDeflectionForm, { isStandalone: true, CustomCaseForm: integrations?.createTicket?.CustomCaseForm }) }) }) }));
}
//# sourceMappingURL=TicketDeflectionForm.js.map