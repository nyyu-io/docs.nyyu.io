import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';
import {} from 'react';
import { BookIconOutline, ChatIconOutline, DiscordIcon, MenuIconOutline, NewspaperIconOutline, SearchIconOutline, SparklesIconOutline, } from './icons.js';
import { openMarkprompt } from './Markprompt.js';
function getMenuIconById(iconId) {
    switch (iconId) {
        case 'book':
            return BookIconOutline;
        case 'chat':
            return ChatIconOutline;
        case 'discord':
            return DiscordIcon;
        case 'magnifying-glass':
            return SearchIconOutline;
        case 'newspaper':
            return NewspaperIconOutline;
        case 'sparkles':
            return SparklesIconOutline;
        default:
            return MenuIconOutline;
    }
}
function MenuEntry(props) {
    const Icon = getMenuIconById(props.iconId);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const Comp = props.href ? props.linkAs || 'a' : 'div';
    return (_jsx(DropdownMenu.Item, { asChild: true, children: _jsxs(Comp, { className: `MarkpromptDropdownMenuItem ${props.type === 'button' ? 'MarkpromptHighlightButton' : ''}`, "data-type": props.type || 'link', "data-id": props.id, "data-theme": props.theme, href: props.href, target: props.target, onClick: () => {
                switch (props.action) {
                    case 'chat': {
                        openMarkprompt('chat');
                        break;
                    }
                    case 'ticket': {
                        openMarkprompt('ticket');
                        break;
                    }
                    case 'search': {
                        openMarkprompt('search');
                        break;
                    }
                }
            }, children: [props.iconId && _jsx(Icon, { className: "MarkpromptMenuIcon" }), props.title] }) }));
}
function Menu(props) {
    const { menu: menuConfig, linkAs, open, onOpenChange, children } = props;
    if (!menuConfig) {
        return _jsx(_Fragment, {});
    }
    return (_jsxs(DropdownMenu.Root, { onOpenChange: onOpenChange, open: open, children: [children, _jsx(DropdownMenu.Portal, { children: _jsxs(DropdownMenu.Content, { className: "MarkpromptDropdownMenuContent", sideOffset: 25, alignOffset: -4, align: "end", children: [menuConfig.title && (_jsx(DropdownMenu.Label, { className: "MarkpromptDropdownMenuTitle", children: menuConfig.title })), menuConfig.subtitle && (_jsx(DropdownMenu.Label, { className: "MarkpromptDropdownMenuSubtitle", children: menuConfig.subtitle })), (menuConfig.title || menuConfig.subtitle) && (_jsx(DropdownMenu.Separator, { className: "MarkpromptDropdownMenuSeparatorSpace" })), menuConfig.sections && menuConfig.sections?.length > 0 && (_jsx("div", { className: "MarkpromptDropdownMenuSections", children: menuConfig.sections?.map((section, i) => {
                                return (_jsxs("div", { className: "MarkpromptDropdownMenuSection", children: [section.heading && (_jsx(DropdownMenu.Label, { className: "MarkpromptDropdownMenuLabel", children: section.heading })), section.entries?.map((entry, j) => {
                                            return (_jsx(MenuEntry, { ...entry, linkAs: linkAs }, `menu-section-${i}-entry-${j}`));
                                        })] }, `menu-section-${i}`));
                            }) })), menuConfig.footer && (_jsxs(_Fragment, { children: [_jsx(DropdownMenu.Separator, { className: "MarkpromptDropdownMenuSeparatorLine" }), menuConfig.footer?.map((entry, i) => {
                                    return (_jsx(MenuEntry, { ...entry, linkAs: linkAs }, `menu-footer-${i}`));
                                })] }))] }) })] }));
}
export { Menu };
//# sourceMappingURL=Menu.js.map