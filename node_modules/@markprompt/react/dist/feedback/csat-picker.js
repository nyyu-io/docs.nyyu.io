import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { DEFAULT_OPTIONS } from '@markprompt/core';
import { useState, useCallback, } from 'react';
import { useFeedback } from './useFeedback.js';
import { StarIcon } from '../icons.js';
function getHeading(csat) {
    switch (csat) {
        case 1:
            return 'Very unhelpful';
        case 2:
            return 'Unhelpful';
        case 3:
            return 'Somewhat helpful';
        case 4:
            return 'Helpful';
        case 5:
            return 'Very helpful';
    }
    return undefined;
}
export function CSATPicker(props) {
    const { csat = 0, projectKey, apiUrl, threadId, feedbackOptions } = props;
    const [tempValue, setTempValue] = useState(csat);
    const [permanentValue, setPermanentValue] = useState(csat);
    const [isHovering, setIsHovering] = useState(false);
    const { submitThreadCSAT } = useFeedback({
        apiUrl: apiUrl || DEFAULT_OPTIONS.apiUrl,
        projectKey,
        feedbackOptions,
    });
    const submitCSAT = useCallback((value) => {
        setTempValue(value);
        setPermanentValue(value);
        submitThreadCSAT(threadId, value);
    }, [submitThreadCSAT, threadId]);
    return (_jsxs(_Fragment, { children: [_jsx("p", { className: "MarkpromptMessageSectionHeading", children: isHovering
                    ? getHeading(tempValue) || feedbackOptions.headingCSAT
                    : feedbackOptions.headingCSAT }), _jsx("div", { onMouseEnter: () => {
                    setIsHovering(true);
                }, onMouseLeave: () => {
                    setIsHovering(false);
                    setTempValue(permanentValue);
                }, style: { display: 'flex', alignItems: 'center', gap: '0.125rem' }, children: Array.from(Array(5).keys()).map((_, i) => {
                    const isActive = i + 1 <= tempValue;
                    return (_jsx(StarIcon, { onMouseEnter: () => {
                            setTempValue((i + 1));
                        }, onClick: () => {
                            submitCSAT((i + 1));
                        }, className: "MarkpromptMessageCSATStar", "data-active": isActive, fill: isActive ? 'var(--markprompt-star-active)' : 'none' }, `star-${i}`));
                }) })] }));
}
//# sourceMappingURL=csat-picker.js.map