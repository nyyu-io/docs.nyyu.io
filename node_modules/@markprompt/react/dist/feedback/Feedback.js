import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { AccessibleIcon } from '@radix-ui/react-accessible-icon';
import { useState, useEffect, } from 'react';
import { DEFAULT_MARKPROMPT_OPTIONS } from '../constants.js';
import { ThumbsDownIcon, ThumbsUpIcon } from '../icons.js';
import { CopyContentButton } from '../primitives/headless.js';
// Historically, this component held the thumbs up/down buttons only.
// This is evolving into a more general "Actions" component, which now
// also includes a copy button.
export function Feedback(props) {
    const { message, heading = DEFAULT_MARKPROMPT_OPTIONS.feedback.heading, submitFeedback, abortFeedbackRequest, variant, messageId, showFeedback = true, showVotes = true, showCopy, ...divProps } = props;
    const [feedback, setFeedback] = useState();
    function handleFeedback(feedback) {
        submitFeedback(feedback, messageId);
        setFeedback(feedback);
    }
    useEffect(() => {
        // Abort feedback request on unmount
        return () => abortFeedbackRequest();
    }, [abortFeedbackRequest]);
    return (_jsxs("div", { ...divProps, "data-variant": variant, children: [heading && _jsx("h3", { children: heading }), _jsxs("div", { children: [showFeedback && (_jsx(_Fragment, { children: showVotes && (_jsxs(_Fragment, { children: [_jsxs("button", { className: "MarkpromptGhostThumbButton", onClick: () => handleFeedback({ vote: '1' }), "data-active": feedback?.vote === '1', children: [variant === 'text' && 'Yes', variant === 'icons' && (_jsx(AccessibleIcon, { label: "yes", children: _jsx(ThumbsUpIcon, { width: 16, height: 16, strokeWidth: 2 }) }))] }), _jsxs("button", { className: "MarkpromptGhostThumbButton", onClick: () => handleFeedback({ vote: '-1' }), "data-active": feedback?.vote === '-1', style: { animationDelay: '100ms' }, children: [variant === 'text' && 'No', variant === 'icons' && (_jsx(AccessibleIcon, { label: "no", children: _jsx(ThumbsDownIcon, { width: 16, height: 16 }) }))] })] })) })), showCopy && message && (_jsx(CopyContentButton, { content: message, className: "MarkpromptGhostThumbButton" }))] })] }));
}
//# sourceMappingURL=Feedback.js.map