import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as AccessibleIcon from '@radix-ui/react-accessible-icon';
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';
import * as Tabs from '@radix-ui/react-tabs';
import { clsx } from 'clsx';
import Emittery from 'emittery';
import { lazy, Suspense, useEffect, useState, useCallback, useMemo, } from 'react';
import { ChatView } from './chat/ChatView.js';
import { DEFAULT_MARKPROMPT_OPTIONS } from './constants.js';
import { CreateTicketView } from './CreateTicketView.js';
import { ChatIcon, CloseIcon, SparklesIcon } from './icons.js';
import { ChatProvider, useChatStore } from './index.js';
import { Menu } from './Menu.js';
import * as BaseMarkprompt from './primitives/headless.js';
import { SearchBoxTrigger } from './search/SearchBoxTrigger.js';
import { GlobalStoreProvider, useGlobalStore } from './store.js';
import { TicketDeflectionForm } from './TicketDeflectionForm.js';
import {} from './types.js';
import { NavigationMenu } from './ui/navigation-menu.js';
import { useDefaults } from './useDefaults.js';
import { useMediaQuery } from './useMediaQuery.js';
import { getDefaultView } from './utils.js';
const SearchView = lazy(() => import('./search/SearchView.js').then((m) => ({ default: m.SearchView })));
const emitter = new Emittery();
/**
 * Open Markprompt programmatically. Useful for building a custom trigger
 * or opening the Markprompt dialog in response to other user actions.
 */
function openMarkprompt(view) {
    emitter.emit('open', { view });
}
/**
 * Close Markprompt programmatically. Useful for building a custom trigger
 * or closing the Markprompt dialog in response to other user actions.
 */
function closeMarkprompt() {
    emitter.emit('close');
}
function Trigger(props) {
    const { display, trigger, hasMenu, Component, onClick, children } = props;
    return (_jsxs(_Fragment, { children: [!trigger?.customElement && !children && display !== 'plain' && (_jsx(_Fragment, { children: trigger?.floating !== false ? (_jsxs(Component, { className: "MarkpromptFloatingTrigger", onClick: onClick, children: [trigger?.buttonLabel && _jsx("span", { children: trigger.buttonLabel }), _jsx(AccessibleIcon.Root, { label: trigger?.label || '', children: trigger?.iconSrc ? (_jsx("img", { className: "MarkpromptChatIcon", width: "20", height: "20", src: trigger.iconSrc })) : (_jsx(ChatIcon, { className: "MarkpromptChatIcon", width: "20", height: "20" })) })] })) : (_jsx(SearchBoxTrigger, { trigger: trigger, onClick: onClick })) })), children && (display !== 'plain' || hasMenu) && (_jsx("div", { onClick: onClick, children: children }))] }));
}
function Markprompt(props) {
    const { projectKey, onDidRequestOpenChange, ...dialogProps } = props;
    if (!projectKey) {
        throw new Error('Markprompt: a project key is required. Make sure to pass the projectKey prop to <Markprompt />.');
    }
    const { apiUrl, display, sticky, defaultView, close, description, feedback, menu, chat, references, search, trigger, title, branding, linkAs, layout, debug, integrations, children, } = useDefaults({
        apiUrl: props.apiUrl,
        display: props.display,
        sticky: props.sticky,
        defaultView: getDefaultView(props.defaultView, props),
        close: props.close,
        description: props.description,
        feedback: props.feedback,
        menu: props.menu,
        chat: props.chat,
        references: props.references,
        search: props.search,
        trigger: props.trigger,
        title: props.title,
        branding: props.branding || { show: props.showBranding },
        layout: props.layout,
        linkAs: props.linkAs,
        debug: props.debug,
        children: props.children,
        integrations: props.integrations,
    }, DEFAULT_MARKPROMPT_OPTIONS);
    const [openViews, setOpenViews] = useState({});
    const globalStoreOptions = useMemo(() => ({
        apiUrl,
        branding,
        chat,
        close,
        debug,
        defaultView,
        description,
        display,
        feedback,
        integrations,
        layout,
        linkAs,
        projectKey,
        references,
        search,
        sticky,
        title,
        trigger,
    }), [
        apiUrl,
        branding,
        chat,
        close,
        debug,
        defaultView,
        description,
        display,
        feedback,
        integrations,
        layout,
        linkAs,
        projectKey,
        references,
        search,
        sticky,
        title,
        trigger,
    ]);
    useEffect(() => {
        const onOpen = ({ view = 'chat' }) => {
            onDidRequestOpenChange?.(true);
            setOpenViews((v) => {
                const closed = Object.keys(v).reduce((acc, value) => {
                    return { ...acc, [value]: false };
                }, {});
                return { ...closed, [view]: true };
            });
        };
        const onClose = () => {
            onDidRequestOpenChange?.(false);
            if (display === 'dialog' || display === 'sheet') {
                setOpenViews({});
            }
        };
        emitter.on('open', onOpen);
        emitter.on('close', onClose);
        return () => {
            emitter.off('open', onOpen);
            emitter.off('close', onClose);
        };
    }, [trigger?.customElement, display, onDidRequestOpenChange]);
    const onTriggerClicked = useCallback(() => {
        openMarkprompt(menu ? 'menu' : 'chat');
    }, [menu]);
    return (_jsxs(_Fragment, { children: [display !== 'plain' && (_jsx(_Fragment, { children: !menu ? (_jsx(Trigger, { display: display, trigger: trigger, Component: "button", onClick: onTriggerClicked, children: children })) : (_jsx(Menu, { menu: menu, open: openViews.menu, onOpenChange: (open) => {
                        setOpenViews((v) => ({ ...v, menu: open }));
                    }, children: _jsx(Trigger, { display: display, trigger: trigger, hasMenu: true, Component: DropdownMenu.Trigger, children: children }) })) })), _jsx(GlobalStoreProvider, { options: globalStoreOptions, children: _jsxs(ChatProvider, { chatOptions: chat, debug: debug, projectKey: projectKey, apiUrl: apiUrl, children: [display !== 'plain' && (_jsx(BaseMarkprompt.Root, { display: "dialog", open: openViews.ticket, onOpenChange: (open) => {
                                onDidRequestOpenChange?.(open);
                                setOpenViews((v) => ({ ...v, ticket: open }));
                            }, ...dialogProps, children: _jsxs(BaseMarkprompt.Portal, { children: [_jsx(BaseMarkprompt.Overlay, { className: "MarkpromptOverlay" }), _jsx(BaseMarkprompt.Content, { className: "MarkpromptContentDialog", "data-variant": "dialog", "data-size": "adaptive", onPointerDownOutside: (e) => e.preventDefault(), children: _jsx(TicketDeflectionForm, {}) })] }) })), _jsxs(BaseMarkprompt.Root, { display: display, open: openViews.chat, onOpenChange: (open) => {
                                onDidRequestOpenChange?.(open);
                                setOpenViews((v) => ({ ...v, chat: open }));
                            }, ...dialogProps, children: [display !== 'plain' && (_jsx(_Fragment, { children: _jsxs(BaseMarkprompt.Portal, { children: [!sticky && (_jsx(BaseMarkprompt.Overlay, { className: "MarkpromptOverlay" })), _jsxs(BaseMarkprompt.Content, { className: "MarkpromptContentDialog", "data-variant": display, onPointerDownOutside: sticky
                                                    ? (e) => {
                                                        e.preventDefault();
                                                    }
                                                    : undefined, children: [_jsx(BaseMarkprompt.Title, { hide: title.hide, children: title.text }), description.text && (_jsx(BaseMarkprompt.Description, { hide: description.hide, children: description.text })), _jsx(MarkpromptContent, { close: close, apiUrl: apiUrl, projectKey: projectKey, chat: chat, debug: debug, feedback: feedback, integrations: integrations, references: references, search: search, layout: layout, linkAs: linkAs, branding: branding, display: display })] })] }) })), display === 'plain' && (_jsx(BaseMarkprompt.PlainContent, { className: "MarkpromptContentPlain", children: _jsx(MarkpromptContent, { chat: chat, feedback: feedback, layout: layout, linkAs: linkAs, projectKey: projectKey, references: references, branding: branding, display: display, 
                                        // Currently, we don't support integrations and
                                        // search in the plain UI
                                        integrations: undefined, search: undefined }) }))] })] }) })] }));
}
function MarkpromptContent(props) {
    const { apiUrl, chat, close, debug, display, feedback, integrations, layout, linkAs, projectKey, references, search, branding, } = props;
    const activeView = useGlobalStore((state) => state.activeView);
    const setActiveView = useGlobalStore((state) => state.setActiveView);
    const submitChat = useChatStore((state) => state.submitChat);
    const isTouchDevice = useMediaQuery('(pointer: coarse)');
    if (!search?.enabled) {
        return (_jsxs("div", { className: "MarkpromptTabsContainer", children: [_jsx("div", { children: display !== 'plain' && (_jsx(NavigationMenu, { title: chat?.title, close: close })) }), _jsx("div", { className: "MarkpromptViews", children: _jsx("div", { style: {
                            position: 'absolute',
                            inset: 0,
                        }, children: chat?.enabled && (_jsx(ChatView, { apiUrl: apiUrl, activeView: activeView, chatOptions: chat, debug: debug, feedbackOptions: feedback, projectKey: projectKey, referencesOptions: references, branding: branding, display: display })) }) })] }));
    }
    return (_jsxs(Tabs.Root, { className: "MarkpromptTabsContainer", value: activeView, onValueChange: (value) => setActiveView(value), children: [layout === 'tabs' ? (_jsxs("div", { style: { position: 'relative' }, children: [_jsxs(Tabs.List, { className: "MarkpromptTabsList", children: [search.enabled && (_jsx(Tabs.Trigger, { value: "search", "aria-label": search.tabLabel, className: "MarkpromptTab", children: search.tabLabel })), chat?.enabled && (_jsxs(Tabs.Trigger, { value: "chat", className: "MarkpromptTab", onClick: () => setActiveView('chat'), children: [_jsx(SparklesIcon, { focusable: false, className: clsx('MarkpromptBaseIcon', {
                                            MarkpromptPrimaryIcon: activeView === 'chat',
                                            MarkpromptHighlightedIcon: activeView === 'search',
                                        }) }), chat?.tabLabel] }))] }), close?.visible && (_jsx("div", { style: {
                            position: 'absolute',
                            right: '0.5rem',
                            top: '0rem',
                            bottom: '0rem',
                        }, children: _jsx(BaseMarkprompt.Close, { className: "MarkpromptClose", style: {
                                position: 'absolute',
                                right: '0.5rem',
                                top: '0rem',
                                bottom: '0rem',
                            }, children: _jsx(AccessibleIcon.Root, { label: close.label, children: isTouchDevice ? (_jsx(CloseIcon, { width: 20, height: 20 })) : (_jsx("kbd", { children: "Esc" })) }) }) }))] })) : (
            // We still include a div to preserve the grid-template-rows rules
            _jsx("div", {})), _jsxs("div", { className: "MarkpromptViews", children: [search.enabled && (_jsx(Tabs.Content, { value: "search", style: {
                            position: 'absolute',
                            inset: 0,
                        }, children: _jsx(Suspense, { fallback: null, children: _jsx(SearchView, { activeView: activeView, apiUrl: apiUrl, projectKey: projectKey, layout: layout, searchOptions: search, linkAs: linkAs, onDidSelectResult: () => emitter.emit('close'), onDidSelectAsk: (query) => {
                                    setActiveView('chat');
                                    if (query) {
                                        submitChat([{ role: 'user', content: query }]);
                                    }
                                }, debug: debug }) }) })), chat?.enabled && (_jsx(Tabs.Content, { value: "chat", style: {
                            position: 'absolute',
                            inset: 0,
                        }, children: _jsx(ChatView, { apiUrl: apiUrl, activeView: activeView, chatOptions: chat, debug: debug, feedbackOptions: feedback, onDidPressBack: () => setActiveView('search'), projectKey: projectKey, referencesOptions: references, showBack: layout === 'panels', linkAs: linkAs, branding: branding, display: display }) })), integrations?.createTicket?.enabled && (_jsx(Tabs.Content, { value: "ticket", style: { position: 'absolute', inset: 0 }, children: _jsx(CreateTicketView, { handleGoBack: () => setActiveView('chat'), includeCTA: true, includeNav: true }) }))] })] }));
}
export { closeMarkprompt, Markprompt, openMarkprompt, Trigger, };
//# sourceMappingURL=Markprompt.js.map