import { type ReactNode } from 'react';
import { type StoreApi } from 'zustand';
import type { ChatViewMessage } from './index.js';
import type { MarkpromptOptions, View } from './types.js';
export type GlobalOptions = MarkpromptOptions & {
    projectKey: string;
};
interface State {
    options: GlobalOptions;
    activeView: View;
    setActiveView: (view: View) => void;
    tickets?: {
        summaryByThreadId: {
            [threadId: string]: ChatViewMessage;
        };
        createTicketSummary: (threadId: string, messages: ChatViewMessage[]) => void;
    };
}
export type GlobalStore = StoreApi<State>;
export declare const createGlobalStore: (options: GlobalOptions) => GlobalStore;
export declare const GlobalStoreContext: import("react").Context<GlobalStore | undefined>;
interface GlobalStoreProviderProps {
    options: GlobalOptions;
    children: ReactNode;
}
export declare function GlobalStoreProvider(props: GlobalStoreProviderProps): JSX.Element;
export declare function useGlobalStore<T>(selector: (state: State) => T): T;
export {};
//# sourceMappingURL=store.d.ts.map