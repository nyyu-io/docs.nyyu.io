import { type AlgoliaDocSearchHit, type FileSectionReference, type SearchResult } from '@markprompt/core';
export declare const DEFAULT_MARKPROMPT_OPTIONS: {
    display: "sheet";
    layout: "panels";
    apiUrl: string;
    branding: {
        show: true;
        type: "plain";
    };
    close: {
        label: string;
        visible: true;
        hasIcon: true;
    };
    description: {
        hide: true;
        text: string;
    };
    feedback: {
        enabled: true;
        votes: true;
        csat: true;
        heading: string;
        headingCSAT: string;
    };
    chat: {
        enabled: true;
        label: string;
        tabLabel: string;
        placeholder: string;
        history: true;
        showCopy: true;
        errorText: () => import("react/jsx-runtime").JSX.Element;
        avatars: {
            visible: true;
        };
    };
    references: {
        loadingText: string;
        heading: string;
        getHref: (result: FileSectionReference | SearchResult | AlgoliaDocSearchHit) => string | undefined;
        getLabel: (reference: FileSectionReference) => string;
    };
    search: {
        enabled: false;
        getHref: (result: FileSectionReference | SearchResult | AlgoliaDocSearchHit) => string | undefined;
        getHeading: (result: SearchResult | AlgoliaDocSearchHit) => string | undefined;
        getTitle: (result: SearchResult | AlgoliaDocSearchHit, query: string) => string | undefined;
        getSubtitle: (result: SearchResult | AlgoliaDocSearchHit) => string | undefined;
        label: string;
        tabLabel: string;
        placeholder: string;
    };
    trigger: {
        label: string;
        placeholder: string;
        floating: true;
        customElement: false;
    };
    title: {
        hide: true;
        text: string;
    };
    integrations: {
        createTicket: {
            enabled: false;
            provider: "zendesk";
            prompt: string;
            messageText: string;
            messageButton: {
                text: string;
                hasIcon: true;
                hasText: true;
            };
            form: {
                emailLabel: string;
                emailPlaceholder: string;
                nameLabel: string;
                namePlaceholder: string;
                submitLabel: string;
                summaryLabel: string;
                summaryLoading: string;
                summaryPlaceholder: string;
                ticketCreatedError: string;
                ticketCreatedOk: string;
                uploadFileLabel: string;
                hasFileUploadInput: false;
                maxFileSizeError: string;
            };
            chat: {
                title: string;
                subtitle: string;
                placeholder: string[];
                disclaimerView: {
                    message: string;
                };
            };
        };
    };
};
//# sourceMappingURL=constants.d.ts.map